{% import "index/macro/macro_index.html.twig" as macro_index %}

{{ macro_index.tinymce_init_js() }}
{{ macro_index.tinymce_js(commentType.messageComment.vars.id) }}

<div id="comment_refresh">
	{% form_theme commentType 'index/CSS/form_div_layout.html.twig' %}
	{{ form_start(commentType, {'action': path('APCommentBundle_create', { 'idClassName' : idClassName, 'className': className }), 'attr':{'class' : 'form-horizontal', 'id': commentType.vars.id, novalidate: 'novalidate'}}) }}
		{% if is_granted("IS_AUTHENTICATED_REMEMBERED") %}
			{{ "comment.edit.LoggedAs"|trans([], "validators") }}<strong>{{ app.user.username }}</strong>
		{% endif %}
		<div class="form-table form-table-4cols form-table-collapse">
			{% if is_granted("IS_AUTHENTICATED_REMEMBERED") == false %}
			<div class="form-table-cell form-table-cell-head">{{ form_label(commentType.anonymousAuthorComment, "comment.edit.Pseudo"|trans([], "validators")) }}</div>
			<div class="form-table-cell">{{ form_errors(commentType.anonymousAuthorComment) }}{{ form_widget(commentType.anonymousAuthorComment, {'attr':{'class':'form-control'}}) }}</div>

			<div class="form-table-cell form-table-cell-head">{{ form_label(commentType.emailComment, "comment.edit.MailDisplay"|trans([], "validators")) }}</div>
			<div class="form-table-cell">{{ form_errors(commentType.emailComment) }}{{ form_widget(commentType.emailComment, {'attr':{'class': 'form-control'}}) }}</div>
			{% endif %}
			<div class="form-table-cell form-table-cell-head">{{ form_label(commentType.messageComment, "comment.edit.Comment"|trans([], "validators")) }}</div>
			<div class="form-table-cell">{{ form_errors(commentType.messageComment) }}{{ form_widget(commentType.messageComment) }}</div>
		</div>
		<div class="mt-3 text-right">
			<button class="submitcomment btn" type="submit">{{ "comment.edit.Validate"|trans([], "validators") }}</button>
		</div>
		<hr class="hr2" />
		{{ form_rest(commentType) }}
		{{ form_errors(commentType) }}
	{{ form_end(commentType) }}

	<div id="list_messages">
		{% include 'comment/Comment/list.html.twig' %}
	</div>

	<script>
		document.querySelector("#{{ commentType.vars.id }}").addEventListener("submit", (e) => {
			submitForm(e)
		});

		function submitForm(e)
		{
			e.preventDefault();
			
			let form = document.querySelector('#{{ commentType.vars.id }}');
			let formData = new FormData(form);

			document.querySelector(".submitcomment").disabled = true;
			document.querySelector(".submitcomment").innerHTML = "<i class='fas fa-arrows-rotate fa-spin'></i>";

			var xmlHttp = new XMLHttpRequest();
			xmlHttp.onreadystatechange = function()
			{
				if(xmlHttp.readyState == 4 && xmlHttp.status == 200)
				{
					document.getElementById('comment_refresh').innerHTML = xmlHttp.responseText;
					tinymce.remove("#{{ commentType.messageComment.vars.id }}")
					loadTinyMCE{{ commentType.messageComment.vars.id }}("#{{ commentType.messageComment.vars.id }}")
					
					document.querySelector("#{{ commentType.vars.id }}").addEventListener("submit", (e) => {
						e.preventDefault()
						
						submitForm(e)
					});

					document.querySelector(".submitcomment").disabled = false;
					document.querySelector(".submitcomment").innerHTML = '{{ "comment.edit.Validate"|trans([], "validators") }}';
				}
			}

			xmlHttp.open("post", "{{ path('APCommentBundle_create', { 'idClassName' : idClassName, 'className': className }) }}"); 
			xmlHttp.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
			xmlHttp.send(formData);
		}
	</script>
</div>
{% block file_selector_widget %}
    {% apply spaceless %}
		<div class="input-group mt-2" id="{{ form.vars.id }}_container">
			{% if base_path is not null %}
				<a href="#" class="input-group-text select_files_colorbox"><i class="fas fa-camera-retro" aria-hidden="true"></i></a>
			{% endif %}
			{{ form_widget(form, {'attr':{'class': 'existing_photo_colorbox form-control', 'placeholder': "admin.general.EnterURL"|trans([], "validators") }}) }}
			<a href="#" class="input-group-text remove_files_colorbox"><i class="fas fa-times" aria-hidden="true"></i></a>
		</div>

		<div class="modal fade selectFileModal" id="selectFileModal_{{ form.vars.id }}" data-field-id="{{ form.vars.id }}" tabindex="-1" role="dialog" aria-labelledby="selectFileModalLabel_{{ form.vars.id }}" aria-hidden="true">
			<div class="modal-dialog modal-lg" role="document">
				<div class="modal-content">
					<div class="modal-body">
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-danger" data-bs-dismiss="modal"><i class="fas fa-times"></i></button>
					</div>
				</div>
			</div>
		</div>

		<script>
			{% if base_path is not null %}
				document.querySelector("div#{{ form.vars.id }}_container .select_files_colorbox").addEventListener('click', (e) => {
					e.preventDefault();
					
					document.querySelector('#selectFileModal_{{ form.vars.id }} .modal-body').innerHTML = "";

					fetch("{{ path(base_path) }}")
					.then(function(response) {
						return response.text();
					})
					.then(function(res) {
						var content = new DOMParser().parseFromString("<div>" + res + "</div>", 'text/html').documentElement.querySelector('body').firstChild;
						document.querySelector('#selectFileModal_{{ form.vars.id }} .modal-body').appendChild(document.createRange().createContextualFragment(content.outerHTML));

						var modal = new bootstrap.Modal(document.getElementById('selectFileModal_{{ form.vars.id }}'));
						modal.show(document.getElementById('selectFileModal_{{ form.vars.id }}'));
					})
				});
			{% endif %}

			document.querySelector("#{{ form.vars.id }}_container .remove_files_colorbox").addEventListener("click", (e) => {
				e.preventDefault();
				document.querySelector("#{{ form.vars.id }}_container .existing_photo_colorbox").value = "";
			});
		</script>
    {% endapply %}
{% endblock %}

{% block date_partial_widget %}
	{{ form_errors(form.day) }}
	{{ form_errors(form.month) }}
	{{ form_errors(form.year) }}

	<div class="input-group">
		{{ form_widget(form.day, {'attr':{'class': 'form-control'}}) }}
		<span class="input-group-text">/</span>
		{{ form_widget(form.month, {'attr':{'class': 'form-control'}}) }}
		<span class="input-group-text">/</span>
		{{ form_widget(form.year, {'attr':{'class': 'form-control'}}) }}
	</div>

	<script>
		document.getElementById("{{ form.day.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 2 || targetElement.value > 3)
				document.getElementById("{{ form.month.vars.id }}").focus();
		});
		
		document.getElementById("{{ form.month.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 2 || targetElement.value > 1)
				document.getElementById("{{ form.year.vars.id }}").focus();
		});
	</script>
{% endblock %}

{% block date_time_partial_widget %}
	{{ form_errors(form.day) }}
	{{ form_errors(form.month) }}
	{{ form_errors(form.year) }}
	{{ form_errors(form.hour) }}
	{{ form_errors(form.minute) }}

	<div class="input-group">
		{{ form_widget(form.day, {'attr':{'class': 'form-control'}}) }}
		<span class="input-group-text">/</span>
		{{ form_widget(form.month, {'attr':{'class': 'form-control'}}) }}
		<span class="input-group-text">/</span>
		{{ form_widget(form.year, {'attr':{'class': 'form-control'}}) }}
	</div>
	<div class="input-group mt-2">
		<span class="input-group-text"><i class="far fa-clock"></i></span>
		{{ form_widget(form.hour, {'attr':{'class': 'form-control'}}) }}
		<span class="input-group-text">:</span>
		{{ form_widget(form.minute, {'attr':{'class': 'form-control'}}) }}
	</div>

	<script>
		document.getElementById("{{ form.day.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 2 || targetElement.value > 3)
				document.getElementById("{{ form.month.vars.id }}").focus();
		});
		
		document.getElementById("{{ form.month.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 2 || targetElement.value > 1)
				document.getElementById("{{ form.year.vars.id }}").focus();
		});
		
		document.getElementById("{{ form.year.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 4)
				document.getElementById("{{ form.hour.vars.id }}").focus();
		});
		
		document.getElementById("{{ form.hour.vars.id }}").addEventListener("keyup", (e) => {
			var targetElement = event.target || event.srcElement;
			
			if(targetElement.value.length == 2)
				document.getElementById("{{ form.minute.vars.id }}").focus();
		});
	</script>
{% endblock %}

{% block illustration_widget %}
	{{ form_errors(form) }}
	{{ form_errors(form.titleFile) }}

	{{ form_widget(form.titleFile, {'attr':{'class': 'form-control'}}) }}
	{{ form_widget(form.photo_selector) }}

	<div class="d-flex mt-3" id="{{ form.photo_selector.vars.id }}_infos">
		<div class="input-group mb-3">
			<span class="input-group-text" id="basic-addon1"><i class="fas fa-balance-scale-right"></i></span>
			{{ form_widget(form.license, {'attr':{'class': 'form-control existing_photo_license_colorbox'}}) }}
		</div>

		<div class="input-group mb-3">
			<span class="input-group-text" id="basic-addon1"><i class="fas fa-user-tie"></i></span>
			{{ form_widget(form.author, {'attr':{'class': 'form-control existing_photo_author_colorbox'}}) }}
		</div>

		<div class="input-group mb-3">
			<span class="input-group-text" id="basic-addon1"><i class="fas fa-link"></i></span>
			{{ form_widget(form.urlSource, {'attr':{'class': 'form-control existing_photo_url_colorbox'}}) }}
		</div>
	</div>

	<div id="{{ form.photo_selector.vars.id }}_caption_container">
	{{ form_label(form.caption, "file.admin.Caption"|trans([], "validators")) }}
	{{ form_widget(form.caption, {'attr':{'class': 'form-control existing_photo_caption_colorbox'}}) }}
	</div>
	
	<script>
		document.getElementById("{{ form.urlSource.vars.id }}").addEventListener('paste', (event) => {
			let paste = (event.clipboardData || window.clipboardData).getData('text');

			var xmlhttp = new XMLHttpRequest();
			xmlhttp.open('GET', "{{ path('Admin_WikidataGenericLoadImage') }}?url=" + encodeURIComponent(paste), true);
			xmlhttp.onreadystatechange = function() {
				if (xmlhttp.readyState == 4) {
					if(xmlhttp.status == 200) {
						var obj = JSON.parse(xmlhttp.responseText);

						if(obj.length == 0)
							return;

						document.getElementById("{{ form.photo_selector.vars.id }}").value = "";
						document.getElementById("{{ form.license.vars.id }}").value = "";
						document.getElementById("{{ form.author.vars.id }}").value = "";

						tinymce.get("{{ form.caption.vars.id }}").setContent("");
						
						if(typeof obj.url !== "undefined") {
							document.getElementById("{{ form.photo_selector.vars.id }}").value = obj.url;
							document.getElementById("{{ form.license.vars.id }}").value = obj.license;
							document.getElementById("{{ form.author.vars.id }}").value = obj.user;

							tinymce.get("{{ form.caption.vars.id }}").setContent(obj.description);
						}
					}
				}
			};
			xmlhttp.send(null);
		});
	</script>
{% endblock %}

{% block links_edit_widget %}
	<script src="{{ asset('extended/js/jsoneditor/jsoneditor.min.js') }}"></script>
	{{ form_widget(form) }}

	{% set noDataTR = '<tr><td colspan=3>' ~ "admin.source.NoData"|trans([], "validators") ~ '</td></tr>' %}

	<div id="{{ form.vars.id}}_container" data-current-value="" data-current-datas="">
	<div id='editor_holder_{{ form.vars.id}}' class='editor_holder'></div>
	<button type="button" class="btn btn-success" id='add_source_{{ form.vars.id}}'><i class="far fa-save"></i> {{ "admin.source.Save"|trans([], "validators") }}</button>
	</div>

	<table class="table table-bordered table-striped mt-2" id="{{ form.vars.id}}_values">
		<tbody>{{ noDataTR|raw }}</tbody>
	</table>

	<script>
		var schemaUrl{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  required_by_default: true,
			  headerTemplate: "",
			  properties: {
				title: {
				  title: "{{ 'admin.source.Title'|trans([], 'validators') }}",
				  type: "string"
				},
				url: {
				  title: "{{ 'admin.source.Link'|trans([], 'validators') }}",
				  type: "string",
				  format: "url",
				  required: true
				},
				license: {
				  title: "{{ 'admin.source.License'|trans([], 'validators') }}",
				  type: "string"
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			compact: true,
			theme: 'bootstrap4'
		};

		var schema{{ form.vars.id }} = schemaUrl{{ form.vars.id }};

		var editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'), schema{{ form.vars.id }});

		if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
			editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));

		JSONEditor.defaults.custom_validators.push((schema{{ form.vars.id }}, value, path) => {
			const errors{{ form.vars.id }} = [];

			if (schema{{ form.vars.id }}.required === true) {
				if (value == "") {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NoBlank'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			if (schema{{ form.vars.id }}.format == "url" && value != "") {
				var r = /^(ftp|http|https):\/\/[^ "]+$/;
				if(!r.test(value)) {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NotValid'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			return errors{{ form.vars.id }};
		});

		var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

		if(currentValue{{ form.vars.id }} !== "") {
			valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});

			$("#{{ form.vars.id}}_values tbody").html("");
			for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
				$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].url + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
			}
		}

		document.getElementById('add_source_{{ form.vars.id}}').addEventListener('click',function() {
			const errors{{ form.vars.id }} = editor{{ form.vars.id }}.validate();

			editor{{ form.vars.id }}.options.show_errors = "always";
			editor{{ form.vars.id }}.onChange();

			if (errors{{ form.vars.id }}.length == 0) {
			    editor{{ form.vars.id }}.options.show_errors = "never";
				var valuesToSave{{ form.vars.id }} = [];
				var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

				if(currentValue{{ form.vars.id }} !== "") {
					valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});
				}

				if($("#{{ form.vars.id}}_container").data("currentValue") !== "")
					valuesToSave{{ form.vars.id }}.splice($("#{{ form.vars.id}}_container").data("currentValue"), 1);

				valuesToSave{{ form.vars.id }}.push(editor{{ form.vars.id }}.getValue());

				$("#{{ form.vars.id }}").val(JSON.stringify(valuesToSave{{ form.vars.id }}));
				$("#{{ form.vars.id}}_values tbody").html("");

				for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].url + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a href='#' class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
				}

				var obj{{ form.vars.id }} = editor{{ form.vars.id }}.getValue()
				Object.keys(obj{{ form.vars.id }}).forEach(k => obj{{ form.vars.id }}[k] = "");
				editor{{ form.vars.id }}.setValue(obj{{ form.vars.id }});
				$("#{{ form.vars.id}}_container").data("currentValue", "");
			}
		});

		$(document).on("click", "#{{ form.vars.id}}_values .edit-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());

			$("#{{ form.vars.id}}_container").data("currentValue", $(this).parent().parent("tr").data("id"));
			$("#{{ form.vars.id}}_container").data("currentDatas", JSON.stringify(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]));

			editor{{ form.vars.id }}.setValue(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]);
		});

		$(document).on("click", "#{{ form.vars.id}}_values .remove-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());
			values{{ form.vars.id }}.splice($(this).parent().data("id"),1);

			$("#{{ form.vars.id }}").val(JSON.stringify(values{{ form.vars.id }}));
			$("#{{ form.vars.id}}_values tr[data-id=" + $(this).parent().parent().data("id") + "]").remove();

			if($("#{{ form.vars.id}}_values tr").length == 0)
				$("#{{ form.vars.id}}_values tbody").append('{{ noDataTR|raw }}');
		});
	</script>
{% endblock %}

{% block source_edit_widget %}
	<script src="{{ asset('extended/js/jsoneditor/jsoneditor.min.js') }}"></script>
	{{ form_widget(form) }}
	<div id="{{ form.vars.id}}_container" data-current-value="" data-current-datas="">
		<div id="{{ form.vars.id}}_type">
			<button type="button" id="{{ form.vars.id}}_url" class="btn btn-secondary" data-value="url"><i class="fas fa-link"></i> {{ "admin.source.WebLink"|trans([], "validators") }}</button>
			<button type="button" id="{{ form.vars.id}}_work" class="btn btn-outline-secondary" data-value="work"><i class="fas fa-book"></i> {{ "admin.source.Work"|trans([], "validators") }}</button>
			<button type="button" id="{{ form.vars.id}}_article" class="btn btn-outline-secondary" data-value="article"><i class="far fa-newspaper"></i> {{ "admin.source.Article"|trans([], "validators") }}</button>
		</div>

		<div id='editor_holder_{{ form.vars.id}}' class='editor_holder'></div>
		<button type="button" class="btn btn-success" id='add_source_{{ form.vars.id}}'><i class="far fa-save"></i> {{ "admin.source.Save"|trans([], "validators") }}</button>
	</div>

	{% set noDataTR = '<tr><td colspan=3>' ~ "admin.source.NoData"|trans([], "validators") ~ '</td></tr>' %}

	<table class="table table-bordered table-striped mt-2" id="{{ form.vars.id}}_values">
		<tbody>{{ noDataTR|raw }}</tbody>
	</table>

	<script>
		var schemaUrl{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  required_by_default: true,
			  headerTemplate: "",
			  properties: {
				author: {
				  title: "{{ 'admin.source.Author'|trans([], 'validators') }}",
				  type: "string"
				},
				title: {
				  title: "{{ 'admin.source.Title'|trans([], 'validators') }}",
				  type: "string"
				},
				url: {
				  title: "{{ 'admin.source.Link'|trans([], 'validators') }}",
				  type: "string",
				  format: "url",
				  required: true
				},
				type: {
				  type: "string",
					options: {
					  hidden: true
					}
				},
				date: {
				  type: "string",
				  title: "{{ 'admin.source.Date'|trans([], 'validators') }}",
				  format: "date"
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			compact: true,
			theme: 'bootstrap4'
		};

		var schemaWork{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  title: "Source",
			  required_by_default: true,
			  properties: {
				author: {
				  title: "{{ 'admin.source.Author'|trans([], 'validators') }}",
				  type: "string"
				},
				title: {
				  title: "{{ 'admin.source.Title'|trans([], 'validators') }}",
				  type: "string",
				  required: true
				},
				publisher: {
				  title: "{{ 'admin.source.Publisher'|trans([], 'validators') }}",
				  type: "string"
				},
				date: {
				  type: "string",
				  title: "{{ 'admin.source.Date'|trans([], 'validators') }}",
				  format: "date"
				},
				isbn10: {
				  type: "string",
				  title: "ISBN-10",
				  format: "isbn",
				  maxLength: 15
				},
				isbn13: {
				  type: "string",
				  title: "ISBN-13",
				  format: "isbn",
				  maxLength: 15
				},
				url: {
				  title: "{{ 'admin.source.Link'|trans([], 'validators') }}",
				  type: "string",
				  format: "url"
				},
				type: {
				  type: "string",
					options: {
					  hidden: true
					}
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			theme: 'bootstrap4'
		};

		var schemaArticle{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  title: "Article",
			  required_by_default: true,
			  properties: {
				author: {
				  title: "{{ 'admin.source.Author'|trans([], 'validators') }}",
				  type: "string"
				},
				title: {
				  title: "{{ 'admin.source.Title'|trans([], 'validators') }}",
				  type: "string",
				  required: true
				},
				periodical: {
				  title: "{{ 'admin.source.Periodical'|trans([], 'validators') }}",
				  type: "string"
				},
				date: {
				  type: "string",
				  title: "{{ 'admin.source.Date'|trans([], 'validators') }}",
				  format: "date"
				},
				url: {
				  title: "{{ 'admin.source.Link'|trans([], 'validators') }}",
				  type: "string",
				  format: "url"
				},
				type: {
				  type: "string",
					options: {
					  hidden: true
					}
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			theme: 'bootstrap4'
		};

		var schema{{ form.vars.id }} = schemaUrl{{ form.vars.id }};

		$("#{{ form.vars.id}}_url").click(function() {
			schema{{ form.vars.id }} = schemaUrl{{ form.vars.id }};
			editor{{ form.vars.id }}.destroy();
			
			editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'),schema{{ form.vars.id }});
			
			if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
				editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));
			
			$(this).removeClass("btn-outline-secondary");
			$(this).addClass("btn-secondary");
			$("#{{ form.vars.id}}_work, #{{ form.vars.id}}_article").addClass("btn-outline-secondary");
			$("#{{ form.vars.id}}_work, #{{ form.vars.id}}_article").removeClass("btn-secondary");
		});

		$("#{{ form.vars.id}}_work").click(function() {
			schema{{ form.vars.id }} = schemaWork{{ form.vars.id }};
			editor{{ form.vars.id }}.destroy();
			
			editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'),schema{{ form.vars.id }});
			
			if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
				editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));
			$(this).addClass("btn-secondary");
			$(this).removeClass("btn-outline-secondary");
			$("#{{ form.vars.id}}_url, #{{ form.vars.id}}_article").addClass("btn-outline-secondary");
			$("#{{ form.vars.id}}_url, #{{ form.vars.id}}_article").removeClass("btn-secondary");
		});

		$("#{{ form.vars.id}}_article").click(function() {
			schema{{ form.vars.id }} = schemaArticle{{ form.vars.id }};
			editor{{ form.vars.id }}.destroy();
			
			editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'),schema{{ form.vars.id }});
			
			if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
				editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));

			$(this).addClass("btn-secondary");
			$(this).removeClass("btn-outline-secondary");
			$("#{{ form.vars.id}}_url, #{{ form.vars.id}}_work").addClass("btn-outline-secondary");
			$("#{{ form.vars.id}}_url, #{{ form.vars.id}}_work").removeClass("btn-secondary");
		});

		var editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'), schema{{ form.vars.id }});

		JSONEditor.defaults.custom_validators.push((schema{{ form.vars.id }}, value, path) => {
			const errors{{ form.vars.id }} = [];

			if (schema{{ form.vars.id }}.required === true) {
				if (value == "") {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NoBlank'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			if (schema{{ form.vars.id }}.format == "url" && value != "") {
				var r = /^(ftp|http|https):\/\/[^ "]+$/;
				if(!r.test(value)) {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NotValid'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			if (schema{{ form.vars.id }}.format == "isbn" && value != "") {
				var r = /^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$/;
				
				if(!r.test(value.replace("-", ""))) {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NotValid'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			return errors{{ form.vars.id }};
		});

		var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

		if(currentValue{{ form.vars.id }} !== "") {
			valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});

			$("#{{ form.vars.id}}_values tbody").html("");
			for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
				if(valuesToSave{{ form.vars.id }}[i].type == "url")
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].url + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
				else
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].title + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></tr>")
			}
		}

		document.getElementById('add_source_{{ form.vars.id}}').addEventListener('click',function() {
			const errors{{ form.vars.id }} = editor{{ form.vars.id }}.validate();

			editor{{ form.vars.id }}.options.show_errors = "always";
			editor{{ form.vars.id }}.onChange();

			if (errors{{ form.vars.id }}.length == 0) {
			    editor{{ form.vars.id }}.options.show_errors = "never";
				var valuesToSave{{ form.vars.id }} = [];
				var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

				if(currentValue{{ form.vars.id }} !== "")
					valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});

				if($("#{{ form.vars.id}}_container").data("currentValue") !== "")
					valuesToSave{{ form.vars.id }}.splice($("#{{ form.vars.id}}_container").data("currentValue"), 1);

				editor{{ form.vars.id }}.getValue().type = $("#{{ form.vars.id}}_type .btn-secondary").data("value");
					
				let save = true;

				if($("#{{ form.vars.id }}").val() != "") {
					let currentValues = [];
					JSON.parse(document.getElementById("{{ form.vars.id }}").value).forEach(element => currentValues.push(JSON.stringify(element)))//.forEach(element => console.log(JSON.stringify(element)));
					if(currentValues.includes(JSON.stringify(editor{{ form.vars.id }}.getValue())))
						save = false;
				}

				if(save) {
					valuesToSave{{ form.vars.id }}.push(editor{{ form.vars.id }}.getValue());

					var arr = valuesToSave{{ form.vars.id }};
					var clean = arr.filter((arr, index, self) =>
						index === self.findIndex((t) => (t.type === arr.type && t.url === arr.url)));

					$("#{{ form.vars.id }}").val(JSON.stringify(clean));
					$("#{{ form.vars.id}}_values tbody").html("");

					for(var i = 0; i < clean.length; i++) {
						if(clean[i].type == "url")
							$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + clean[i].url + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a href='#' class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
						else
							$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + clean[i].title + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a href='#' class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></tr>")
					}

					var obj{{ form.vars.id }} = editor{{ form.vars.id }}.getValue()
					Object.keys(obj{{ form.vars.id }}).forEach(k => obj{{ form.vars.id }}[k] = "");
					editor{{ form.vars.id }}.setValue(obj{{ form.vars.id }});
				}
			}
		});

		$(document).on("click", "#{{ form.vars.id}}_values .edit-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());

			$("#{{ form.vars.id}}_container").data("currentValue", $(this).parent().parent("tr").data("id"));
			$("#{{ form.vars.id}}_container").data("currentDatas", JSON.stringify(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]));

			$("#{{ form.vars.id}}_" + values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")].type).click();
		});

		$(document).on("click", "#{{ form.vars.id}}_values .remove-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());
			values{{ form.vars.id }}.splice($(this).parent().data("id"),1);

			$("#{{ form.vars.id }}").val(JSON.stringify(values{{ form.vars.id }}));
			$("#{{ form.vars.id}}_values tr[data-id=" + $(this).parent().parent().data("id") + "]").remove();

			if($("#{{ form.vars.id}}_values tr").length == 0)
				$("#{{ form.vars.id}}_values tbody").append('{{ noDataTR|raw }}');
		});
	</script>
{% endblock %}

{% block identifiers_edit_widget %}
	<script src="{{ asset('extended/js/jsoneditor/jsoneditor.min.js') }}"></script>
	{{ form_widget(form) }}

	{% set noDataTR = '<tr><td colspan=3>' ~ "admin.source.NoData"|trans([], "validators") ~ '</td></tr>' %}

	<div id="{{ form.vars.id}}_container" data-current-value="" data-current-datas="">
	<div id='editor_holder_{{ form.vars.id}}' class='editor_holder'></div>
	<button type="button" class="btn btn-success" id='add_source_{{ form.vars.id}}'><i class="far fa-save"></i> {{ "admin.source.Save"|trans([], "validators") }}</button>
	</div>

	<table class="table table-bordered table-striped mt-2" id="{{ form.vars.id}}_values">
		<tbody>{{ noDataTR|raw }}</tbody>
	</table>

	<script>
		function reload{{ form.vars.id }}(data) {
			$("#{{ form.vars.id}}_values tbody").html("");
			if(typeof data.identifiers !== "undefined") {
				for(var j = 0; j < data.identifiers.length; j++) {
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ j + "'><td>" + data.identifiers[j].identifier + " (" + data.identifiers[j].value + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
				}
			}
		}
	
		var schemaUrl{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  required_by_default: true,
			  headerTemplate: "",
			  properties: {
				identifier: {
				    title: "{{ 'admin.identifier.Id'|trans([], 'validators') }}",
					type: "string",
					enum: JSON.parse('{{ form.vars.enum|json_encode|e('js') }}'),
					required: true
				},
				value: {
				  title: "{{ 'admin.identifier.Value'|trans([], 'validators') }}",
				  type: "string",
				  format: "url",
				  required: true
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			compact: true,
			theme: 'bootstrap4'
		};

		var schema{{ form.vars.id }} = schemaUrl{{ form.vars.id }};

		var editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'), schema{{ form.vars.id }});

		if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
			editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));

		JSONEditor.defaults.custom_validators.push((schema{{ form.vars.id }}, value, path) => {
			const errors{{ form.vars.id }} = [];

			if (schema{{ form.vars.id }}.required === true) {
				if (value == "") {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NoBlank'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			return errors{{ form.vars.id }};
		});

		var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

		if(currentValue{{ form.vars.id }} !== "" && currentValue{{ form.vars.id }} !== "undefined") {
			valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});

			$("#{{ form.vars.id}}_values tbody").html("");
			for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
				$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].identifier + " (" + valuesToSave{{ form.vars.id }}[i].value + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
			}
		}

		document.getElementById('add_source_{{ form.vars.id}}').addEventListener('click',function() {
			const errors{{ form.vars.id }} = editor{{ form.vars.id }}.validate();

			editor{{ form.vars.id }}.options.show_errors = "always";
			editor{{ form.vars.id }}.onChange();

			if (errors{{ form.vars.id }}.length == 0) {
			    editor{{ form.vars.id }}.options.show_errors = "never";
				var valuesToSave{{ form.vars.id }} = [];
				var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

				if(currentValue{{ form.vars.id }} !== "" && currentValue{{ form.vars.id }} !== "undefined") {
					valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});
				}

				if($("#{{ form.vars.id}}_container").data("currentValue") !== "")
					valuesToSave{{ form.vars.id }}.splice($("#{{ form.vars.id}}_container").data("currentValue"), 1);

				valuesToSave{{ form.vars.id }}.push(editor{{ form.vars.id }}.getValue());

				$("#{{ form.vars.id }}").val(JSON.stringify(valuesToSave{{ form.vars.id }}));
				$("#{{ form.vars.id}}_values tbody").html("");

				for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].identifier + " (" + valuesToSave{{ form.vars.id }}[i].value + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a href='#' class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
				}

				var obj{{ form.vars.id }} = editor{{ form.vars.id }}.getValue()
				Object.keys(obj{{ form.vars.id }}).forEach(k => obj{{ form.vars.id }}[k] = "");
				editor{{ form.vars.id }}.setValue(obj{{ form.vars.id }});
				$("#{{ form.vars.id}}_container").data("currentValue", "");
			}
		});

		$(document).on("click", "#{{ form.vars.id}}_values .edit-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());

			$("#{{ form.vars.id}}_container").data("currentValue", $(this).parent().parent("tr").data("id"));
			$("#{{ form.vars.id}}_container").data("currentDatas", JSON.stringify(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]));

			editor{{ form.vars.id }}.setValue(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]);
		});

		$(document).on("click", "#{{ form.vars.id}}_values .remove-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());
			values{{ form.vars.id }}.splice($(this).parent().data("id"),1);

			$("#{{ form.vars.id }}").val(JSON.stringify(values{{ form.vars.id }}));
			$("#{{ form.vars.id}}_values tr[data-id=" + $(this).parent().parent().data("id") + "]").remove();

			if($("#{{ form.vars.id}}_values tr").length == 0)
				$("#{{ form.vars.id}}_values tbody").append('{{ noDataTR|raw }}');
		});
	</script>
{% endblock %}

{% block review_scores_edit_widget %}
	<script src="{{ asset('extended/js/jsoneditor/jsoneditor.min.js') }}"></script>
	{{ form_widget(form) }}

	{% set noDataTR = '<tr><td colspan=3>' ~ "admin.source.NoData"|trans([], "validators") ~ '</td></tr>' %}

	<div id="{{ form.vars.id}}_container" data-current-value="" data-current-datas="">
	<div id='editor_holder_{{ form.vars.id}}' class='editor_holder'></div>
	<button type="button" class="btn btn-success" id='add_source_{{ form.vars.id}}'><i class="far fa-save"></i> {{ "admin.source.Save"|trans([], "validators") }}</button>
	</div>

	<table class="table table-bordered table-striped mt-2" id="{{ form.vars.id}}_values">
		<tbody>{{ noDataTR|raw }}</tbody>
	</table>

	<script>
		function reload{{ form.vars.id }}(data) {
			$("#{{ form.vars.id}}_values tbody").html("");
			
			if(typeof data.reviewScores === "undefined")
				return;
			
			for(var j = 0; j < data.reviewScores.length; j++) {
				$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ j + "'><td>" + data.reviewScores[j].source + " (" + data.reviewScores[j].score + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
			}
		}
	
		var schemaUrl{{ form.vars.id }} = 
		{
			schema: {
			  type: "object",
			  required_by_default: true,
			  headerTemplate: "",
			  properties: {
				source: {
				    title: "{{ 'movie.admin.ReviewSource'|trans([], 'validators') }}",
					type: "string",
					enum: JSON.parse('{{ form.vars.enum|json_encode|e('js') }}'),
					required: true
				},
				score: {
				  title: "{{ 'movie.admin.ReviewScore'|trans([], 'validators') }}",
				  type: "string",
				  format: "number",
				  required: true
				}
			  }
			},
			disable_edit_json: true,
			disable_collapse: true,
			disable_properties: true,
			remove_button_labels: true,
			compact: true,
			theme: 'bootstrap4'
		};

		var schema{{ form.vars.id }} = schemaUrl{{ form.vars.id }};

		var editor{{ form.vars.id }} = new JSONEditor(document.getElementById('editor_holder_{{ form.vars.id}}'), schema{{ form.vars.id }});

		if($("#{{ form.vars.id}}_container").data("currentDatas") !== "")
			editor{{ form.vars.id }}.setValue(JSON.parse($("#{{ form.vars.id}}_container").data("currentDatas")));

		JSONEditor.defaults.custom_validators.push((schema{{ form.vars.id }}, value, path) => {
			const errors{{ form.vars.id }} = [];

			if (schema{{ form.vars.id }}.required === true) {
				if (value == "") {
					errors{{ form.vars.id }}.push({
						path: path,
						message: "{{ ('admin.source.NoBlank'|trans([], 'validators'))|e('js') }}"
					});
				}
			}

			return errors{{ form.vars.id }};
		});

		var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

		if(currentValue{{ form.vars.id }} !== "") {
			valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});

			$("#{{ form.vars.id}}_values tbody").html("");
			for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
				$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].source + " (" + valuesToSave{{ form.vars.id }}[i].score + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
			}
		}

		document.getElementById('add_source_{{ form.vars.id}}').addEventListener('click',function() {
			const errors{{ form.vars.id }} = editor{{ form.vars.id }}.validate();

			editor{{ form.vars.id }}.options.show_errors = "always";
			editor{{ form.vars.id }}.onChange();

			if (errors{{ form.vars.id }}.length == 0) {
			    editor{{ form.vars.id }}.options.show_errors = "never";
				var valuesToSave{{ form.vars.id }} = [];
				var currentValue{{ form.vars.id }} = $("#{{ form.vars.id }}").val();

				if(currentValue{{ form.vars.id }} !== "") {
					valuesToSave{{ form.vars.id }} = JSON.parse(currentValue{{ form.vars.id }});
				}

				if($("#{{ form.vars.id}}_container").data("currentValue") !== "")
					valuesToSave{{ form.vars.id }}.splice($("#{{ form.vars.id}}_container").data("currentValue"), 1);

				valuesToSave{{ form.vars.id }}.push(editor{{ form.vars.id }}.getValue());

				$("#{{ form.vars.id }}").val(JSON.stringify(valuesToSave{{ form.vars.id }}));
				$("#{{ form.vars.id}}_values tbody").html("");

				for(var i = 0; i < valuesToSave{{ form.vars.id }}.length; i++) {
					$("#{{ form.vars.id}}_values tbody").append("<tr data-id='"+ i + "'><td>" + valuesToSave{{ form.vars.id }}[i].source + " (" + valuesToSave{{ form.vars.id }}[i].score + ")" + "<td><a href='#' class='btn btn-outline-info btn-sm edit-source'><i class='fas fa-pen'></i></a></td><td><a href='#' class='btn btn-outline-danger btn-sm remove-source'><i class='fas fa-trash'></i></a></td></tr>")
				}

				var obj{{ form.vars.id }} = editor{{ form.vars.id }}.getValue()
				Object.keys(obj{{ form.vars.id }}).forEach(k => obj{{ form.vars.id }}[k] = "");
				editor{{ form.vars.id }}.setValue(obj{{ form.vars.id }});
				$("#{{ form.vars.id}}_container").data("currentValue", "");
			}
		});

		$(document).on("click", "#{{ form.vars.id}}_values .edit-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());

			$("#{{ form.vars.id}}_container").data("currentValue", $(this).parent().parent("tr").data("id"));
			$("#{{ form.vars.id}}_container").data("currentDatas", JSON.stringify(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]));

			editor{{ form.vars.id }}.setValue(values{{ form.vars.id }}[$(this).parent().parent("tr").data("id")]);
		});

		$(document).on("click", "#{{ form.vars.id}}_values .remove-source", function(e) {
			e.preventDefault();
			var values{{ form.vars.id }} = JSON.parse($("#{{ form.vars.id }}").val());
			values{{ form.vars.id }}.splice($(this).parent().data("id"),1);

			$("#{{ form.vars.id }}").val(JSON.stringify(values{{ form.vars.id }}));
			$("#{{ form.vars.id}}_values tr[data-id=" + $(this).parent().parent().data("id") + "]").remove();

			if($("#{{ form.vars.id}}_values tr").length == 0)
				$("#{{ form.vars.id}}_values tbody").append('{{ noDataTR|raw }}');
		});
	</script>
{% endblock %}
{% import "admin/GenericAdmin/macro.html.twig" as macro_admin %}

<div class="form-table-cell form-table-cell-head">{{ form_label(form.title, "movie.admin.Title"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.title) }}{{ form_widget(form.title, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.illustration, "movie.admin.Photo"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.illustration) }}{{ form_widget(form.illustration) }}</div>

<div class="form-table-cell form-table-cell-head">
{{ form_label(form.introduction, "movie.admin.Introduction"|trans([], "validators")) }}
</div>
<div class="form-table-cell">
	{{ macro_admin.import_wikipedia(form.introduction.vars.id, null, {onlyHeader: true}) }}
	{{ form_errors(form.introduction) }}{{ form_widget(form.introduction) }}
</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.text, "movie.admin.Text"|trans([], "validators")) }}</div>
<div class="form-table-cell">
	{{ macro_admin.import_wikipedia(form.text.vars.id, form.source.vars.id) }}
	{{ form_errors(form.text) }}{{ form_widget(form.text) }}
</div>

{{ macro_admin.wikidata_html_generic(form) }}

<div class="form-table-cell form-table-cell-head">{{ form_label(form.language, "movie.admin.Language"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.language) }}{{ form_widget(form.language, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.state, "movie.admin.State"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.state) }}{{ form_widget(form.state, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.theme, "movie.admin.Theme"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.theme) }}{{ form_widget(form.theme, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.country, "movie.admin.Country"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.country) }}{{ form_widget(form.country, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.trailer, "movie.admin.Trailer"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.trailer) }}{{ form_widget(form.trailer, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.fullStreaming, "movie.admin.FullStreaming"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.fullStreaming) }}{{ form_widget(form.fullStreaming, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.duration, "movie.admin.Duration"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.duration) }}{{ form_widget(form.duration, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.releaseYear, "movie.admin.ReleaseYear"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.releaseYear) }}{{ form_widget(form.releaseYear, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.genre, "movie.admin.Genre"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.genre) }}{{ form_widget(form.genre, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.movieBiographies, "biographies.admin.Biographies"|trans([], "validators")) }}</div>
<div class="form-table-cell">
    <ul id="biography-fields-list"
        data-prototype="{{ form_widget(form.movieBiographies.vars.prototype)|e }}"
        data-widget-tags="{{ '<li></li>'|e }}"
        data-widget-counter="{{ form.movieBiographies|length }}"
		class="list-unstyled">
		{% for movieBiographyField in form.movieBiographies %}
			{% if movieBiographyField.vars.value is not empty and movieBiographyField.vars.value.biography is not empty %}
				<li class="border p-2 bg-light mb-2 clearfix container-form-biography">
					<div data-wikidata="{{ movieBiographyField.vars.value.biography.wikidata }}" data-title="{{ movieBiographyField.vars.value.biography.title }}" data-international-name="{{ movieBiographyField.vars.value.biography.internationalName }}">
						{{ form_errors(movieBiographyField) }}
						{{ form_errors(movieBiographyField.biography) }}
						
						{{ form_label(movieBiographyField.biography, "biographies.admin.Biography"|trans([], "validators")) }}
						{{ form_widget(movieBiographyField.biography) }}
						
						{{ form_label(movieBiographyField.occupation, "biographies.admin.Occupation"|trans([], "validators")) }}
						{{ form_widget(movieBiographyField.occupation) }}
						
						{{ form_label(movieBiographyField.role, "biographies.admin.Role"|trans([], "validators")) }}
						{{ form_widget(movieBiographyField.role) }}
						
						{{ form_widget(movieBiographyField.internationalName) }}
						{{ form_widget(movieBiographyField.wikidata) }}
					</div>
				</li>
			{% endif %}
		{% endfor %}
	</ul>
	
    <button type="button"
        class="add-another-collection-widget btn btn-success float-right"
        data-list-selector="#biography-fields-list"><i class="fas fa-plus"></i></button>
		
	<div class="d-none">
	{% if entity.id is null and not form.movieBiographies.isRendered() %}
		{{ form_widget(form.movieBiographies) }}
	{% endif %}
	</div>
</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.previous, "movie.admin.Previous"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.previous) }}{{ form_widget(form.previous, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.source, "movie.admin.Sources"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.source) }}{{ form_widget(form.source, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.tags, "tag.admin.Tags"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.tags) }}{{ form_widget(form.tags, { 'attr': {'class': 'form-control', 'value': get_tags(entity, false) } }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.boxOffice, "movie.admin.BoxOffice"|trans([], "validators")) }}</div>
<div class="form-table-cell">
	{{ form_errors(form.boxOffice) }}
	<div class="form-group-inline">
		<div class="row">
			<div class="col-md-6">
				{{ form_widget(form.boxOffice, { 'attr': {'class': 'form-control'}}) }}
			</div>
			<div class="col-md-6">
				{{ form_widget(form.boxOfficeUnit, { 'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
	</div>
</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.cost, "movie.admin.Cost"|trans([], "validators")) }}</div>
<div class="form-table-cell">
	{{ form_errors(form.cost) }}
	<div class="form-group-inline">
		<div class="row">
			<div class="col-md-6">
				{{ form_widget(form.cost, { 'attr': {'class': 'form-control'}}) }}
			</div>
			<div class="col-md-6">
				{{ form_widget(form.costUnit, { 'attr': {'class': 'form-control'}}) }}
			</div>
		</div>
	</div>
</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.reviewScores, "movie.admin.ReviewScores"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.reviewScores) }}{{ form_widget(form.reviewScores, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.identifiers, "movie.admin.Identifiers"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.identifiers) }}{{ form_widget(form.identifiers, { 'attr': {'class': 'form-control'} }) }}</div>

{% include 'quotation/BiographyAdmin/_validateBiographyModal.html.twig' with { language: form.language.vars.id } %}

<script>
	document.getElementById("wikidata").addEventListener("click", (e) => {
		e.preventDefault();

		let locale = document.getElementById("{{ form.language.vars.id }}").value;
		let code = document.getElementById("{{ form.wikidata.vars.id }}").value;

		if (code == "")
			return;

		let xmlHttp = new XMLHttpRequest();
		
		document.querySelector("#wikidata .fa-arrows-rotate").classList.add("fa-spin");
		
		xmlHttp.onreadystatechange = function() {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
				let data = JSON.parse(xmlHttp.responseText);

				document.getElementById("{{ form.title.vars.id }}").value = data.title;
				document.getElementById("url_{{ form.introduction.vars.id }}").value = data.url;
				document.getElementById("url_{{ form.introduction.vars.id }}").dispatchEvent(new Event("change"));
				document.getElementById("url_{{ form.text.vars.id }}").value = data.url;
				document.getElementById("url_{{ form.text.vars.id }}").dispatchEvent(new Event("change"));
				document.getElementById("{{ form.country.vars.id }}").value = data.origin.country.id;

				document.getElementById("{{ form.releaseYear.year.vars.id }}").value = data.publicationDate.year;
				document.getElementById("{{ form.releaseYear.day.vars.id }}").value = data.publicationDate.day;
				document.getElementById("{{ form.releaseYear.month.vars.id }}").value = data.publicationDate.month;

				editor{{ form.identifiers.vars.id }}.setValue(data.identifiers)
				document.getElementById("{{ form.identifiers.vars.id }}").value = JSON.stringify(data.identifiers);
				reload{{ form.identifiers.vars.id }}(data);

				editor{{ form.reviewScores.vars.id }}.setValue(data.reviewScores)
				document.getElementById("{{ form.reviewScores.vars.id }}").value = JSON.stringify(data.reviewScores);
				reload{{ form.reviewScores.vars.id }}(data);
				
				if(typeof data.boxOffice !== "undefined") {
					document.getElementById("{{ form.boxOffice.vars.id }}").value = parseInt(data.boxOffice.amount);
					document.getElementById("{{ form.boxOfficeUnit.vars.id }}").value = data.boxOffice.unit;
				}
				
				if(typeof data.cost !== "undefined") {
					document.getElementById("{{ form.cost.vars.id }}").value = parseInt(data.cost.amount);
					document.getElementById("{{ form.costUnit.vars.id }}").value = data.cost.unit;
				}
				
				if(typeof data.duration !== "undefined" && data.duration.unit == "minute") {
					document.getElementById("{{ form.duration.vars.id }}").value = data.duration.amount;
				}

				if(document.getElementById("{{ form.illustration.photo_selector.vars.id }}").value == "") {
					document.getElementById("{{ form.illustration.photo_selector.vars.id }}").value = data.image.url;
					document.getElementById("{{ form.illustration.license.vars.id }}").value = data.image.license;
					document.getElementById("{{ form.illustration.author.vars.id }}").value = data.image.user;
					document.getElementById("{{ form.illustration.urlSource.vars.id }}").value = data.image.url;
					
					if(data.image.description != null)
						tinymce.get("{{ form.illustration.caption.vars.id }}").setContent(data.image.description);
				}
				
				document.querySelector("#wikidata .fa-arrows-rotate").classList.remove("fa-spin");

				let i = 0;
				
				let wikidatas = [];
				
				{% for movieBiographyField in form.movieBiographies %}
					{% if movieBiographyField.vars.value is not empty and movieBiographyField.vars.value.biography is not empty %}
						wikidatas.push("{{ movieBiographyField.vars.value.biography.title }}_{{ movieBiographyField.vars.value.biography.wikidata }}");
					{% endif %}
				{% endfor %}

				for(role in data.person) {
					for(wikidata in data.person[role]) {
						if(wikidatas.includes(data.person[role][wikidata].title + "_" + wikidata))
							continue;

						var id = addNewBiography(document.querySelector('.add-another-collection-widget').getAttribute("data-list-selector"));

						document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_occupation").value = role;

						if(document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_occupation").value == "")
							continue;
							
						if(document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_occupation").value != "{{ constant('App\\Entity\\Movies\\MediaInterface::ACTOR_OCCUPATION') }}")
							document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_role").parentNode.style.display = "none";
						
						var $newOption = $("<option selected='selected'></option>").val("__" + data.person[role][wikidata].title).text(data.person[role][wikidata].title + " (+)");

						document.getElementById("{{ form.movieBiographies.vars.id }}_" + id).setAttribute("data-wikidata", wikidata);
						document.getElementById("{{ form.movieBiographies.vars.id }}_" + id).setAttribute("data-title", data.person[role][wikidata].title);
						
						document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_wikidata").value = wikidata;

						addBiographyValidationFormDisplayLink(document.getElementById("{{ form.movieBiographies.vars.id }}_" + id).parentNode, data.person[role][wikidata].objects.length);
						
						$("#{{ form.movieBiographies.vars.id }}_" + id + "_biography").append($newOption).trigger('change');
						document.getElementById("{{ form.movieBiographies.vars.id }}_" + id + "_occupation").value = role;
						i++;
					}
				}
			}
		}
		
		xmlHttp.overrideMimeType("application/json");
		xmlHttp.open("GET", "{{ path('Movie_Admin_Wikidata') }}?locale=" + locale + "&code=" + code, true);
		xmlHttp.send();
	});
	
/*(function() {
    const send = XMLHttpRequest.prototype.send
    XMLHttpRequest.prototype.send = function() { 
        this.addEventListener('load', function() {alert("ok")
            console.log('global handler', this.responseText)
            // add your global handler here
        })
        return send.apply(this, arguments)
    }
})()*/
	
	$(function() {
		$(".container-form-biography select.list-occupation").each(function() {
			$(this).parent().children(".role-biography").show();
			if($(this).val() != "{{ constant('App\\Entity\\Movies\\MediaInterface::ACTOR_OCCUPATION') }}")
				$(this).parent().children(".role-biography").hide();
		});
		$(document).on("change", ".container-form-biography select.list-occupation", function() {
			$(this).closest(".container-form-biography").find(".role-biography").show();

			if($(this).val() != "{{ constant('App\\Entity\\Movies\\MediaInterface::ACTOR_OCCUPATION') }}")
				$(this).closest(".container-form-biography").find(".role-biography").hide();
		});
	});
</script>
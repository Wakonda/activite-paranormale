{% macro import_wikipedia(fieldId, sourceField = null, options = {}) %}
<style>
	.select2-container--default {
		height: calc(1.5em + .75rem + 2px);
	}
	.select2-selection--multiple {
		height: calc(1.5em + .75rem + 2px);
		overflow: auto;
	}
</style>

<div class="input-group mb-2">
	<div class="input-group-prepend">
		<span class="input-group-text"><i class="fab fa-wikipedia-w"></i></span>
	</div>
	<input type="text" id="url_{{ fieldId }}" class="form-control wikidata-url"/>
	<select id="sections_{{ fieldId }}" name="sections[]" multiple="multiple" style="min-width: 25%"></select>
	<button type="button" class="btn btn-success" id="import_url_{{ fieldId }}"><i class="fas fa-check" id="import_url_icon_{{ fieldId }}"></i></button>
</div>
<link rel="stylesheet" type="text/css" href="{{ asset('extended/js/select2/dist/css/select2.min.css') }}" media="screen" />
<script src="{{ asset('extended/js/select2/dist/js/select2.full.min.js') }}"></script>
<script src="{{ asset('extended/js/select2/dist/js/i18n/'~app.request.locale~'.js') }}"></script>
<script src="{{ asset('bundles/tetranzselect2entity/js/select2entity.js') }}"></script>
<script>
	$(function() {
		{% if app.request.query.has("fromId") and sourceField is not empty %}
			var data = document.getElementById("{{ sourceField }}").value;

			if(data !== null && data != "") {
				data = JSON.parse(data);
				
				if(typeof data[0] !== "undefined" && typeof data[0].url !== "undefined") {
					window.onload = function(){
						document.querySelectorAll(".wikidata-url").forEach(e => {
							e.value = data[0].url;
							e.dispatchEvent(new Event("change"));
						});
					};
				}
			}
		{% endif %}

		$('#sections_{{ fieldId }}').select2();
		$("#url_{{ fieldId }}").on("change paste", function(e) {
			e.preventDefault();
			
			let url = $("#url_{{ fieldId }}").val();
			
			if(typeof (e.originalEvent || e).clipboardData !== "undefined") {
				url = (e.originalEvent || e).clipboardData.getData('text/plain');
				$("#url_{{ fieldId }}").val(url);
			}
			
			if(url == "")
				return;

			$.ajax({
				type: "GET",
				url: "{{ path('Admin_WikipediaSections') }}",
				data: { "url" : url },
				success: function(data)
				{
					$('#sections_{{ fieldId }}').html("").select2({"data": data, closeOnSelect: false});

					{% if options.onlyHeader is defined %}
						if (typeof data[0] !== "undefined") {
							$("#sections_{{ fieldId }}").val(data[0].id).trigger("change");
							document.getElementById("import_url_{{ fieldId }}").click();
						}
					{% endif %}
				}
			});
		});

		document.getElementById("import_url_{{ fieldId }}").addEventListener("click", (e) => {
			e.preventDefault();
			let url = $("#url_{{ fieldId }}").val();
			let sections = $("#sections_{{ fieldId }}").val();

			let xmlHttp = new XMLHttpRequest();
			
			document.querySelector("#import_url_icon_{{ fieldId }}").classList.remove("fa-check");
			document.querySelector("#import_url_icon_{{ fieldId }}").classList.add("fa-arrows-rotate", "fa-spin");
			
			{% if sourceField is not null %}
				var data = editor{{ sourceField }}.getValue();
				data.type = "url"
				data.url = url
				editor{{ sourceField }}.setValue(data)
			{% endif %}
			
			xmlHttp.onreadystatechange = function() {
				if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
					var data = JSON.parse(xmlHttp.response);
					tinymce.get("{{ fieldId }}").setContent(data.content);

					{% if sourceField is not null %}
						document.getElementById('add_source_{{ sourceField }}').click();
					{% endif %}

					document.querySelector("#import_url_icon_{{ fieldId }}").classList.add("fa-check");
					document.querySelector("#import_url_icon_{{ fieldId }}").classList.remove("fa-arrows-rotate", "fa-spin");
				}
			}
			
			var formData = new FormData(); 
			formData.append("url", url);
			
			for(var i = 0; i < sections.length; i++)
				formData.append("sections[]", sections[i]);

			xmlHttp.open("POST", "{{ path('Admin_ImportWikipedia') }}", true);
			xmlHttp.send(formData);
		});
	});
</script>
{% endmacro %}

{% macro wikidata_html_generic(form) %}
<div class="form-table-cell form-table-cell-head">{{ form_label(form.wikidata, "Wikidata") }}</div>
<div class="form-table-cell">
	<div class="input-group">{{ form_errors(form.wikidata) }}{{ form_widget(form.wikidata, { 'attr': {'class': 'form-control'}}) }}
		<div class="input-group-append">
			<button id="wikidata" class="btn btn-outline-secondary" type="button"><i class="fas fa-arrows-rotate"></i></button>
		</div>
	</div>
</div>
{% endmacro %}

{% macro import_wikidata_generic(wikidataFieldId, languageFieldId, titleFieldId, textFieldId, illustrationForm) %}
<script>
	document.getElementById("wikidata").addEventListener("click", (e) => {
		e.preventDefault();
		let locale = document.getElementById("{{ languageFieldId }}").value;
		let code = document.getElementById("{{ wikidataFieldId }}").value;

		if (code == "")
			return;

		let xmlHttp = new XMLHttpRequest();

		document.querySelector('#wikidata .fa-arrows-rotate').classList.add("fa-spin");
		
		xmlHttp.onreadystatechange = function() {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
				let data = JSON.parse(xmlHttp.responseText);

				if(data.length == 0) {
					document.querySelector('#wikidata .fa-arrows-rotate').classList.remove("fa-spin");
					return;
				}

				document.getElementById("{{ titleFieldId }}").value = data.title;
				document.getElementById("url_{{ textFieldId }}").value = data.url;
				document.getElementById("url_{{ textFieldId }}").dispatchEvent(new Event("change"));

				{% if illustrationForm is not empty %}
					if(document.getElementById("{{ illustrationForm.photo_selector.vars.id }}").value == "") {
						document.getElementById("{{ illustrationForm.photo_selector.vars.id }}").value = data.image.url;
						
						{% if illustrationForm.license is defined %}
							document.getElementById("{{ illustrationForm.license.vars.id }}").value = data.image.license;
						{% endif %}
						
						{% if illustrationForm.author is defined %}
							document.getElementById("{{ illustrationForm.author.vars.id }}").value = data.image.user;
						{% endif %}
						
						{% if illustrationForm.urlSource is defined %}
							document.getElementById("{{ illustrationForm.urlSource.vars.id }}").value = data.image.url;
						{% endif %}
						
						{% if illustrationForm.caption is defined %}
							if(data.image.description != null)
								tinymce.get("{{ illustrationForm.caption.vars.id }}").setContent(data.image.description);
						{% endif %}
					}
				{% endif %}

				document.querySelector('#wikidata .fa-arrows-rotate').classList.remove("fa-spin");
			}
		};

		xmlHttp.overrideMimeType("application/json");
		xmlHttp.open("GET", "{{ path('Admin_WikidataGeneric') }}?locale=" + locale + "&code=" + code, true);
		xmlHttp.send();
	});
</script>
{% endmacro %}

{% macro moderation_buttons(path_delete) %}
	var selected = [];
	var inButton = document.createElement("button");
	inButton.setAttribute("title", "{{ 'admin.general.DeleteSelectedItems'|trans([], 'validators') }}");
	inButton.classList.add("btn");
	inButton.classList.add("btn-danger");
	inButton.classList.add("moderationButton");

	inButton.innerHTML = "<i class='fa-solid fa-trash'></i>";

	inButton.addEventListener("click", function(e) {
		let xmlHttp = new XMLHttpRequest();

		xmlHttp.onreadystatechange = function() {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
				console.log(oTable)
				oTable.ajax.reload();
			}
		}

		xmlHttp.open("POST", "{{ path(path_delete) }}", true);
		xmlHttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
		xmlHttp.send("ids=" + JSON.stringify(selected));
	});

	document.querySelector(".index_admin").insertAdjacentElement('afterend', inButton);

	var selectAllButton = document.createElement("button");
	selectAllButton.setAttribute("title", "{{ 'admin.general.SelectVisibleItems'|trans([], 'validators') }}");
	selectAllButton.classList.add("btn");
	selectAllButton.classList.add("btn-success");
	selectAllButton.classList.add("mr-2");
	selectAllButton.classList.add("moderationButton");
	
	selectAllButton.innerHTML = "<i class='fa-regular fa-square-check'></i>";
	
	selectAllButton.addEventListener("click", function(e) {
		document.querySelectorAll(".index_admin tbody tr").forEach(function(row, i) {
			document.querySelector(".index_admin tbody").children.item(i).classList.add('table-info');
			var iPos = oTable.row(row).index();
			var aData = oTable.row(iPos).data();
			selected.push(aData[0]);
		});
	});

	document.querySelector(".index_admin").insertAdjacentElement('afterend', selectAllButton);

	var unselectAllButton = document.createElement("button");
	unselectAllButton.setAttribute("title", "{{ 'admin.general.DeselectVisibleItems'|trans([], 'validators') }}");
	unselectAllButton.classList.add("btn");
	unselectAllButton.classList.add("btn-warning");
	unselectAllButton.classList.add("mr-2");
	unselectAllButton.classList.add("moderationButton");

	unselectAllButton.innerHTML = "<i class='fa-regular fa-square'></i>";

	unselectAllButton.addEventListener("click", function(e) {
		selected = [];
		document.querySelectorAll(".index_admin tbody tr").forEach(function(row, i) {
			document.querySelector(".index_admin tbody").children.item(i).classList.remove('table-info');
		});
	});

	document.querySelector(".index_admin").insertAdjacentElement('afterend', unselectAllButton);
{% endmacro %}

{% macro datatables_moderation_additional_options() %}
	"fnRowCallback": function(nRow, aData, iDisplayIndex) {
		document.querySelectorAll(".index_admin tbody tr").forEach(function(row, i) {
			if (selected.includes(aData[0]) != false)
				row.classList.add('table-info')
		});

		return nRow;
	},
	"fnDrawCallback": function(oSettings) {
		document.querySelectorAll(".index_admin tbody tr").forEach(function(row, i) {
			var iPos = oTable.row(row).index();
			if (iPos != null) {
				var aData = oTable.row(iPos).data();

				if (selected.includes(aData[0]) != false)
					document.querySelector(".index_admin tbody").children.item(i).classList.add('table-info');
			}

			document.querySelector(".index_admin tbody").children.item(i).addEventListener("click", function(e) {
				var iPos = oTable.row(row).index();
				var aData = oTable.row(iPos).data();
				var iId = aData[0];
				is_in_array = selected.includes(iId);

				if (is_in_array == false) {
					selected[selected.length] = iId;
				} else {
					selected = selected.filter(function(value) {
						return value != iId;
					});
				}

				if(e.currentTarget.classList.contains('table-info'))
					e.currentTarget.classList.remove('table-info');
				else
					e.currentTarget.classList.add('table-info')
			});
		});
	}
{% endmacro %}
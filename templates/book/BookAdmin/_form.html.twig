{% import "admin/GenericAdmin/macro.html.twig" as macro_admin %}

<div class="form-table-cell form-table-cell-head">{{ form_label(form.title, "book.admin.Title"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.title) }}{{ form_widget(form.title, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.illustration, "book.admin.Photo"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.illustration) }}{{ form_widget(form.illustration) }}</div>

<div class="form-table-cell form-table-cell-head">
{{ form_label(form.introduction, "book.admin.Introduction"|trans([], "validators")) }}
</div>
<div class="form-table-cell">
	{{ macro_admin.import_wikipedia(form.introduction.vars.id) }}
	{{ form_errors(form.introduction) }}{{ form_widget(form.introduction) }}
</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.text, "book.admin.Text"|trans([], "validators")) }}</div>
<div class="form-table-cell">
	{{ macro_admin.import_wikipedia(form.text.vars.id, form.source.vars.id) }}
	{{ form_errors(form.text) }}{{ form_widget(form.text) }}
</div>

{{ macro_admin.wikidata_html_generic(form) }}

<div class="form-table-cell form-table-cell-head">{{ form_label(form.publicationDate, "book.admin.PublicationDate"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.publicationDate) }}{{ form_widget(form.publicationDate, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.language, "book.admin.Language"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.language) }}{{ form_widget(form.language, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.genre, "book.admin.LiteraryGenre"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.genre) }}{{ form_widget(form.genre, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.authors, "book.admin.Authors"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.authors) }}{{ form_widget(form.authors, { 'attr': {'data-width': '100%'} }) }}</div>

<div class="form-table-cell form-table-cell-head fictional_character_container">{{ form_label(form.fictionalCharacters, "book.admin.FictionalCharacters"|trans([], "validators")) }}</div>
<div class="form-table-cell fictional_character_container">{{ form_errors(form.fictionalCharacters) }}{{ form_widget(form.fictionalCharacters, { 'attr': {'data-width': '100%'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.theme, "book.admin.Theme"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.theme) }}{{ form_widget(form.theme, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.tags, "tag.admin.Tags"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.tags) }}{{ form_widget(form.tags, { 'attr': {'class': 'form-control', 'value': get_tags(entity, false) } }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.state, "book.admin.State"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.state) }}{{ form_widget(form.state, { 'attr': {'class': 'form-control'} }) }}</div>

<div class="form-table-cell form-table-cell-head">{{ form_label(form.source, "book.admin.Sources"|trans([], "validators")) }}</div>
<div class="form-table-cell">{{ form_errors(form.source) }}{{ form_widget(form.source, { 'attr': {'class': 'form-control'} }) }}</div>

<script>
	selectGenreElement(document.getElementById("{{ form.genre.vars.id }}"));

	document.getElementById("{{ form.genre.vars.id }}").addEventListener("change", (e) => {
		selectGenreElement(e.target) ;
	});
	
	function selectGenreElement(e) {
			document.querySelectorAll(".fictional_character_container").forEach(el => el.style.display = "block");
		if(e.options[e.options.selectedIndex].dataset.fiction == '0')
			document.querySelectorAll(".fictional_character_container").forEach(el => el.style.display = "none");
	}

	document.getElementById("wikidata").addEventListener("click", (e) => {
		e.preventDefault();

		let locale = document.getElementById("{{ form.language.vars.id }}").value;
		let code = document.getElementById("{{ form.wikidata.vars.id }}").value;

		if (code == "")
			return;

		let xmlHttp = new XMLHttpRequest();
		
		document.querySelector("#wikidata .fa-sync").classList.add("fa-spin");
		
		xmlHttp.onreadystatechange = function() {
			if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {
				let data = JSON.parse(xmlHttp.responseText);

				document.getElementById("{{ form.title.vars.id }}").value = data.title;
				document.getElementById("url_{{ form.introduction.vars.id }}").value = data.url;
				document.getElementById("url_{{ form.introduction.vars.id }}").dispatchEvent(new Event("change"));
				document.getElementById("url_{{ form.text.vars.id }}").value = data.url;
				document.getElementById("url_{{ form.text.vars.id }}").dispatchEvent(new Event("change"));

				if(document.getElementById("{{ form.illustration.photo_selector.vars.id }}").value == "") {
					document.getElementById("{{ form.illustration.photo_selector.vars.id }}").value = data.image.url;
					document.getElementById("{{ form.illustration.license.vars.id }}").value = data.image.license;
					document.getElementById("{{ form.illustration.author.vars.id }}").value = data.image.user;
					document.getElementById("{{ form.illustration.urlSource.vars.id }}").value = data.image.url;
					
					if(data.image.description =! null)
						tinymce.get("{{ form.illustration.caption.vars.id }}").setContent(data.image.description);
				}

				document.querySelector('#wikidata .fa-sync').classList.remove("fa-spin");
			}
		}
		
		xmlHttp.overrideMimeType("application/json");
		xmlHttp.open("GET", "{{ path('Admin_WikidataGeneric') }}?locale=" + locale + "&code=" + code, true);
		xmlHttp.send();
	});
</script>
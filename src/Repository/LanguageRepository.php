<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LanguageRepository extends EntityRepository
{
	public function getAllAvailableLanguages(array $languages)
	{
		$qb = $this->createQueryBuilder('o');

		$qb->where('o.abbreviation IN (:languages)')
			->setParameter('languages', $languages)
			->orderBy('o.title', 'asc');
		
		return $qb->getQuery()->getResult();
	}

	public function displayFlagWithoutWorld()
	{
		$query = $this->_em->createQuery('SELECT a FROM App\Entity\Language a WHERE a.abbreviation NOT IN (:languages) ORDER BY a.abbreviation ASC');
		$query->setParameter('languages', ["fr", "en", "es", "all"]);

		return $query->getResult();
	}
	
	public function worldFlag()
	{
		$qb = $this->createQueryBuilder('o');

		$qb->where('o.abbreviation = :langAll')
			->setParameter('langAll', "all");

		return $qb->getQuery()->getResult();
	}

	// Administration
	public function countAdmin()
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select("count(c)");

		return $qb->getQuery()->getSingleScalarResult();
	}
	
	// FORM
	public function getLangueOnForm()
	{	
		$qb = $this->createQueryBuilder('o');
		$qb->orderBy('o.title', 'ASC');
		return $qb;
	}

	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, $count = false)
	{
		$aColumns = array( 'c.id', 'c.title', 'c.abbreviation', 'c.title', 'c.id');

		$qb = $this->createQueryBuilder('c');
		$qb->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0]);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			foreach($aColumns as $column)
			{
				$qb->orWhere($column." LIKE :search")
				   ->setParameter('search', $search);
			}
		}
		if($count)
		{
			$qb->select("count(c)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}

	public function countForDoublons($entity)
	{
		$qb = $this->createQueryBuilder("b");
		$qb->select("count(b)")
		   ->where("b.abbreviation = :abbreviation")
		   ->setParameter("abbreviation", $entity->getAbbreviation());
		   
		if($entity->getId() != null)
		{
		   $qb->andWhere("b.id != :id")
		      ->setParameter("id", $entity->getId());
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}
}
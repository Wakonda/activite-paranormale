<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EpisodeTelevisionSerieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EpisodeTelevisionSerieRepository extends EntityRepository
{
	public function countForDoublons($entity)
	{
		$qb = $this->createQueryBuilder("b");
		$qb->select("count(b)")
		   ->where("b.televisionSerie = :id")
		   ->setParameter("id", $entity->getTelevisionSerie()->getId())
		   ->andWhere("b.season = :season")
		   ->setParameter("season", $entity->getSeason())
		   ->andWhere("b.episodeNumber = :episodeNumber")
		   ->setParameter("episodeNumber", $entity->getEpisodeNumber());
		   
		if($entity->getId() != null)
		{
		   $qb->andWhere("b.id != :id")
		      ->setParameter("id", $entity->getId());
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, Int $televisionSerieId, bool $count = false)
	{
		$aColumns = array( 'u.title', 'u.season', 'u.episodeNumber', 'u.id');

		$qb = $this->createQueryBuilder('u');
		$qb->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0])
		   ->where("u.televisionSerie = :televisionSerieId")
		   ->setParameter("televisionSerieId", $televisionSerieId);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			foreach($aColumns as $column)
			{
				$qb->orWhere($column." LIKE :search")
				   ->setParameter('search', $search);
			}
		}
		
		if(!empty($searchByColumns))
		{
			$aSearchColumns = array('u.title', 'u.season', 'u.episodeNumber', 'u.id');
			for($i = 0; $i < count($aSearchColumns); $i++)
			{
				if(!empty($searchByColumns[$i]))
				{
					$search = "%".$searchByColumns[$i]."%";
					$qb->andWhere($aSearchColumns[$i]." LIKE :searchByColumn".$i)
					   ->setParameter("searchByColumn".$i, $search);
				}
			}
		}
		
		if($count)
		{
			$qb->select("count(u)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}
	
	public function getEpisodes($televisionSerie)
	{
		$qb = $this->createQueryBuilder("b");
		
		$qb->select("count(b) AS totalEpisodes")
		   ->addSelect("min(b.releaseDate) AS minDate")
		   ->addSelect("max(b.releaseDate) AS maxDate")
		   ->addSelect("b.season AS season")
		   ->where("b.televisionSerie = :id")
		   ->setParameter("id", $televisionSerie->getId())
		   ->groupBy("b.season");

		return $qb->getQuery()->getResult();
	}
}
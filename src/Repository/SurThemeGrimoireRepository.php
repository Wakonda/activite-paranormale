<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SurThemeGrimoireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurThemeGrimoireRepository extends EntityRepository
{
	public function menuTheme($lang, $surtheme)
	{
		$queryBuilder = $this->createQueryBuilder('o');
		$queryBuilder->join('o.language', 'l')
					 ->join('o.menuGrimoire', 'm')
					 ->where('l.abbreviation = :lang')
					 ->setParameter('lang', $lang)
					 ->andWhere('m.title = :surtheme')
					 ->setParameter('surtheme', $surtheme)
					 ->orderBy('o.title');

		return $queryBuilder->getQuery()->getResult();	
	}		

	public function recupTheme($lang, $idTheme)
	{
		$queryBuilder = $this->createQueryBuilder('o');
		$queryBuilder->join('o.language', 'l')
					 ->where('l.abbreviation = :lang')
					 ->setParameter('lang', $lang)
					 ->andWhere('o.id = :idTheme')
					 ->setParameter('idTheme', $idTheme);

		return $queryBuilder->getQuery()->getSingleResult();
	}

	public function getSurThemeByLanguage($lang)
	{
		$qb = $this->createQueryBuilder('o');
		$qb->join('o.language', 'l')
		   ->where('l.abbreviation = :lang')
		   ->setParameter('lang', $lang)
		   ->orderBy('o.title');

		return $qb->getQuery()->getResult();	
	}
	
	// ADMINISTRATION
	public function countAdmin()
	{
		$qb = $this->createQueryBuilder('c');

		$qb->select("count(c)");
		$q = $qb->getQuery();

		return $q->getSingleScalarResult();
	}

	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, $count = false)
	{
		$aColumns = array( 'c.id', 'c.title', 'c.theme', 'c.photo', 'l.title', 'c.id');

		$qb = $this->createQueryBuilder('c');
		$qb->join('c.language', 'l')
		   ->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0]);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			$orWhere = [];
			
			foreach($aColumns as $column)
				$orWhere[] = $column." LIKE :search";

			$qb->andWhere(implode(" OR ", $orWhere))
			   ->setParameter('search', $search);
		}
		if($count)
		{
			$qb->select("count(c)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}

	public function countForDoublons($entity)
	{
		$qb = $this->createQueryBuilder("b");
		$qb->select("count(b)")
		   ->where("b.title = :title")
		   ->setParameter("title", $entity->getTitle())
		   ->innerjoin("b.language", "l")
		   ->andWhere("l.abbreviation = :abbreviation")
		   ->setParameter("abbreviation", $entity->getLanguage()->getAbbreviation())
		   ->innerjoin("b.menuGrimoire", "mg")
		   ->andWhere("mg.title = :mgTitle")
		   ->setParameter("mgTitle", $entity->getMenuGrimoire()->getTitle());
		   
		if($entity->getId() != null)
		{
		   $qb->andWhere("b.id != :id")
		      ->setParameter("id", $entity->getId());
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getFileSelectorColorboxAdmin($iDisplayStart, $iDisplayLength, $sSearch, $count = false)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->orderBy('c.title', 'ASC');

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";

			$qb->where("c.photo LIKE :search")
			   ->setParameter('search', $search);
		}
		if($count)
		{
			$qb->select("COUNT(DISTINCT c.photo)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->groupBy('c.photo')->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		$entities = $qb->getQuery()->getResult();
		$res = array();
		
		foreach($entities as $entity)
		{
			$photo = new \StdClass();
			$photo->photo = $entity->getPhoto();
			$photo->path = $entity->getAssetImagePath();
			
			$res[] = $photo;
		}
		
		return $res;
	}
	
	public function getAllThemesWorld($excludeLanguages)
	{
		$qb = $this->createQueryBuilder('c');
		$qb ->join('c.language', 'l')
			->where('l.abbreviation NOT IN (:excludeLanguages)')
			->setParameter('excludeLanguages', $excludeLanguages)
			->orderBy("c.title");

		$res = [];

		foreach($qb->getQuery()->getResult() as $data)
			$res[$data->getLanguage()->getTitle()][] = ["id" => $data->getId(), "title" => $data->getTitle(), "language" => $data->getLanguage()->getAbbreviation()];
		
		return $res;
	}
}
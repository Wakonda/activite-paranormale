<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SurThemeGrimoireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SurThemeGrimoireRepository extends EntityRepository
{
	public function menuTheme($lang, $surtheme)
	{
		$qb = $this->createQueryBuilder('o');
		$qb->join('o.language', 'l')
		 ->join('o.parentTheme', 'm')
		 ->where('l.abbreviation = :lang')
		 ->setParameter('lang', $lang)
		 ->andWhere('m.title = :surtheme')
		 ->setParameter('surtheme', $surtheme)
		 ->orderBy('o.title');

		return $qb->getQuery()->getResult();	
	}		

	public function recupTheme($lang, $idTheme)
	{
		$qb = $this->createQueryBuilder('o');
		$qb->andWhere('o.id = :idTheme')
		 ->setParameter('idTheme', $idTheme);

		return $qb->getQuery()->getOneOrNullResult();
	}

/*
select stg.title, count(*)
from surthemegrimoire stg
join surthemegrimoire stg2 on stg2.parentTheme_id = stg.id
join grimoire g on g.surTheme_id = stg2.id
where stg.parentTheme_id is null
group by stg.title
*/

	public function countGrimoireByParentTheme($locale) {
		$qb = $this->createQueryBuilder("stg");
		
		$qb->select("stg.title")
		   ->addSelect("COUNT(stg) as countTheme")
		   ->join(\App\Entity\SurThemeGrimoire::class, "stg2", "WITH", "stg2.parentTheme = stg.id")
		   ->join(\App\Entity\Grimoire::class, "g", "WITH", "g.surTheme = stg2.id")
		   ->join("stg.language", "l")
		   ->where("stg.parentTheme IS NULL")
		   ->andWhere("l.abbreviation = :locale")
		   ->setParameter("locale", $locale)
		   ->groupBy("stg.title");

		$res = [];
		
		foreach($qb->getQuery()->getResult() as $data)
			$res[$data["title"]] = $data["countTheme"];

		return $res;
	}

	public function getSurThemeByLanguage($lang)
	{
		$qb = $this->createQueryBuilder('o');
		$qb->join('o.language', 'l')
		   ->where('l.abbreviation = :lang')
		   ->setParameter('lang', $lang)
		   ->andWhere("o.parentTheme IS NOT NULL")
		   ->orderBy('o.title');

		return $qb->getQuery()->getResult();	
	}
	
	// ADMINISTRATION
	public function countAdmin()
	{
		$qb = $this->createQueryBuilder('c');

		$qb->select("count(c)");
		$q = $qb->getQuery();

		return $q->getSingleScalarResult();
	}

	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, $count = false)
	{
		$aColumns = array( 'c.id', 'c.title', 'c.theme', 'c.photo', 'l.title', 'c.id');

		$qb = $this->createQueryBuilder('c');
		$qb->join('c.language', 'l')
		   ->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0]);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			$orWhere = [];
			
			foreach($aColumns as $column)
				$orWhere[] = $column." LIKE :search";

			$qb->andWhere(implode(" OR ", $orWhere))
			   ->setParameter('search', $search);
		}
		if($count)
		{
			$qb->select("count(c)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}

	public function countForDoublons($entity)
	{
		$qb = $this->createQueryBuilder("b");
		$qb->select("count(b)")
		   ->where("b.title = :title")
		   ->setParameter("title", $entity->getTitle())
		   ->innerjoin("b.language", "l")
		   ->andWhere("l.abbreviation = :abbreviation")
		   ->setParameter("abbreviation", $entity->getLanguage()->getAbbreviation())
		   ->innerjoin("b.parentTheme", "mg");
		   
		if(!empty($mg = $entity->getParentTheme())) {
		   $qb->andWhere("mg.title = :mgTitle")
		   ->setParameter("mgTitle", $entity->getParentTheme()->getTitle());
		} else
		   $qb->andWhere("mg.title IS NULL");
		   
		if($entity->getId() != null)
		{
		   $qb->andWhere("b.id != :id")
		      ->setParameter("id", $entity->getId());
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getFileSelectorColorboxAdmin($iDisplayStart, $iDisplayLength, $sSearch, $count = false)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->orderBy('c.title', 'ASC');

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";

			$qb->where("c.photo LIKE :search")
			   ->setParameter('search', $search);
		}
		if($count)
		{
			$qb->select("COUNT(DISTINCT c.photo)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->groupBy('c.photo')->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		$entities = $qb->getQuery()->getResult();
		$res = [];
		
		foreach($entities as $entity)
		{
			$photo = new \StdClass();
			$photo->photo = $entity->getPhoto();
			$photo->path = $entity->getAssetImagePath();
			
			$res[] = $photo;
		}
		
		return $res;
	}
	
	public function getAllThemesWorld($excludeLanguages)
	{
		$qb = $this->createQueryBuilder('c');
		$qb ->join('c.language', 'l')
			->where('l.abbreviation NOT IN (:excludeLanguages)')
			->setParameter('excludeLanguages', $excludeLanguages)
			->orderBy("c.title");

		$res = [];

		foreach($qb->getQuery()->getResult() as $data)
			$res[$data->getLanguage()->getTitle()][] = ["id" => $data->getId(), "title" => $data->getTitle(), "language" => $data->getLanguage()->getAbbreviation()];
		
		return $res;
	}

	// FORM
	public function getParentThemeByLanguage($language)
	{
		$qb = $this->createQueryBuilder('s');
		$qb
		   ->join('s.language', 'l')
		   ->where('l.abbreviation = :language')
		   ->setParameter('language', $language)
		   ->andWhere("s.parentTheme IS NULL")
		   ->orderBy('s.title');

		return $qb;
	}

	public function getParentThemeByLanguageForList($locale, $currentLocale)
	{
		$qb = $this->createQueryBuilder("t");
		
		$qbCurrentLocale = $this->createQueryBuilder("tcl");
		
		if($locale != $currentLocale)
		{
			$qbCurrentLocale->select("tcl.title")
			  ->join("tcl.language", "lcl")
			  ->where("lcl.abbreviation = :currentLocale")
			  ->andWhere("tcl.internationalName = t.internationalName");
			
			$qb->select("t.title AS title")
			   ->addSelect("(".$qbCurrentLocale->getDQL().") AS localeTitle")
		       ->setParameter("currentLocale", $currentLocale);
		} else
			$qb->select("t.title AS title");

		$qb->addSelect("t.id")
		   ->join("t.language", "lt")
		   ->andWhere("t.parentTheme IS NULL")
		   ->orderBy("t.title", "ASC");
		   
		if(!empty($locale))
		   $qb->andWhere("lt.abbreviation = :locale")
		      ->setParameter("locale", $locale);
		   
		return array_map(function($e) { return ["id" => $e["id"], "title" => $e["title"].((isset($e["localeTitle"]) and !empty($d = $e["localeTitle"]) and $e["localeTitle"] != $e["title"]) ? " [".$d."]" : "")]; }, $qb->getQuery()->getResult());
	}
}
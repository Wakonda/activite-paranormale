<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * StateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StateRepository extends EntityRepository
{
	// FORM
	public function getStateByLanguage($language)
	{
		$currentLanguagesWebsite = explode(",", $_ENV["LANGUAGES"]);
		if(!in_array($language, $currentLanguagesWebsite))
			$language = "en";
	
		$qb = $this->createQueryBuilder('li');
		$qb->join('li.language', 'l')
		   ->where('l.abbreviation = :lang')
		   ->setParameter('lang', $language)
		   ->orderBy('li.title');
		return $qb;
	}

	// ADMINISTRATION
	public function countAdmin()
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select("count(c)");

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, $count = false)
	{
		$aColumns = array( 'c.id', 'c.title', 'c.internationalName', 'c.id');

		$qb = $this->createQueryBuilder('c');
		$qb->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0]);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			$orWhere = [];
			
			foreach($aColumns as $column)
				$orWhere[] = $column." LIKE :search";

			$qb->andWhere(implode(" OR ", $orWhere))
			   ->setParameter('search', $search);
		}
		if($count)
		{
			$qb->select("count(c)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}

	public function countForDoublons($entity)
	{
		$qb = $this->createQueryBuilder("b");
		$qb->select("count(b)")
		   ->where("b.title = :title")
		   ->setParameter("title", $entity->getTitle())
		   ->innerjoin("b.language", "l")
		   ->andWhere("l.abbreviation = :abbreviation")
		   ->setParameter("abbreviation", $entity->getLanguage()->getAbbreviation());
		   
		if($entity->getId() != null)
		{
		   $qb->andWhere("b.id != :id")
		      ->setParameter("id", $entity->getId());
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}

	public function getStateByLanguageAndInternationalName($language, $internationalName)
	{
		$qb = $this->createQueryBuilder('li');
		$qb->join('li.language', 'l')
		   ->where('l.abbreviation = :lang')
		   ->setParameter('lang', $language)
		   ->andWhere('li.internationalName = :internationalName')
		   ->setParameter('internationalName', $internationalName);

		return $qb->getQuery()->getOneOrNullResult();
	}
}
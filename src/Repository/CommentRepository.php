<?php

namespace App\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends EntityRepository
{
	public function getShowComment($nbrMessageParPage, $page, $className, $idClassName)
	{	
		$premierMessageAafficher=($page-1)*$nbrMessageParPage;
	
		$qb = $this->createQueryBuilder('o');

		$qb->where('o.classNameComment = :classNameComment')
			->setParameter('classNameComment', $className)
			->andWhere('o.idClassComment = :idClassComment')
			->setParameter('idClassComment', $idClassName)
			->orderBy('o.dateComment', 'DESC')
			->setFirstResult($premierMessageAafficher)
			->setMaxResults($nbrMessageParPage);
		
		return $qb->getQuery()->getResult();
	}
	
	public function countComment($className, $idClassName)
	{
		$qb = $this->createQueryBuilder('c');
		$qb ->select("count(c)")
		    ->where('c.classNameComment = :classNameComment')
			->setParameter('classNameComment', $className)
			->andWhere('c.idClassComment = :idClassComment')
			->setParameter('idClassComment', $idClassName);

		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function countAdmin()
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select("count(c)");

		return $qb->getQuery()->getSingleScalarResult();
	}

	public function countAllCommentsByState($state)
	{
		$qb = $this->createQueryBuilder('c');
		$qb->select("count(c)")
		   ->where("c.state = :state")
		   ->setParameter("state", $state);
		
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function getDatatablesForIndexAdmin($iDisplayStart, $iDisplayLength, $sortByColumn, $sortDirColumn, $sSearch, $searchByColumns, $count = false)
	{
		$aColumns = array( 'c.id', 'user', 'c.emailComment', 'c.dateComment', 'c.state', 'c.id');

		$qb = $this->createQueryBuilder('c');
		$qb->addSelect("IF(c.authorComment IS NOT NULL, u.username, c.anonymousAuthorComment) AS user, c.emailComment, c.dateComment, c.id, c.state")
		   ->leftjoin('c.authorComment', 'u')
		   ->orderBy($aColumns[$sortByColumn[0]], $sortDirColumn[0]);

		if(!empty($sSearch))
		{
			$search = "%".$sSearch."%";
			$orWhere = [];
			
			foreach($aColumns as $column)
				$orWhere[] = $column." LIKE :search";

			$qb->andWhere(implode(" OR ", $orWhere))
			   ->setParameter('search', $search);
		}
		
		if(!empty($searchByColumns))
		{
			for($i = 0; $i < count($aColumns); $i++)
			{
				if($searchByColumns[$i] != "")
				{
					if(is_numeric($searchByColumns[$i]) and $i == 4) {
						$search = $searchByColumns[$i];
						$qb->andWhere($aColumns[$i]." = :searchByColumn".$i);
					} else {
						$search = "%".$searchByColumns[$i]."%";
						$qb->andWhere($aColumns[$i]." LIKE :searchByColumn".$i);
					}
					
					$qb->setParameter("searchByColumn".$i, $search);
				}
			}
		}

		if($count)
		{
			$qb->select("count(c)");
			return $qb->getQuery()->getSingleScalarResult();
		}
		else
			$qb->setFirstResult($iDisplayStart)->setMaxResults($iDisplayLength);

		return $qb->getQuery()->getResult();
	}
	
	public function getCommentbyPage($nbrMessageParPage, $page, $className, $idClassName)
	{	
		$premierMessageAafficher=($page-1)*$nbrMessageParPage;
		$queryBuilder = $this->createQueryBuilder('o');

		$queryBuilder->join('o.'.$className, 'c')
					->where('c.id = :id')
					->setParameter('id', $idClassName)
					->orderBy('o.dateCommentaire', 'DESC')
					->setFirstResult($premierMessageAafficher)
					->setMaxResults($nbrMessageParPage);
		
		return $queryBuilder->getQuery()->getResult();
	}
}